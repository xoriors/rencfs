cargo-features = ["profile-rustflags"]

[package]
name = "rencfs"
description = "An encrypted file system that is mounted with FUSE on Linux. It can be used to create encrypted directories."
version = "0.13.78"
edition = "2021"
license = "MIT OR Apache-2.0"
authors = ["Radu Marias <radumarias@gmail.com>"]
homepage = "https://radumarias.github.io/rencfs"
repository = "https://github.com/radumarias/rencfs"
readme = "README.md"
keywords = ["privacy", "filesystem", "encryption", "security", "cryptography"]
categories = ["cryptography", "filesystem"]
documentation = "https://docs.rs/rencfs"
exclude = [".github/"]

[dependencies]
clap = { version = "4.5.4", features = ["derive", "cargo"] }
libc = "0.2.153"
serde = { version = "1.0.197", features = ["derive"] }
bincode = "1.3.3"
thiserror = "1.0.58"
rand = "0.8.5"
rand_core = "0.6.4"
base64 = "0.22.1"
tokio = { version = "1.36", features = ["full"] }
tokio-stream = { version = "0.1.15", features = ["fs"] }
futures-util = "0.3.30"
bytes = "1.5"
tracing = { version = "0.1.40", features = [
    "max_level_trace",
    "release_max_level_debug",
] }
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
tracing-appender = "0.2.3"
tracing-test = "0.2.4"
ctrlc = { version = "3.1.9", features = ["termination"] }
strum = "0.26.2"
strum_macros = "0.26.2"
rpassword = "7.3.1"
anyhow = "1.0.82"
argon2 = "0.5.3"
keyring = "2.3.2"
retainer = "0.3.0"
num-format = "0.4.4"
ring = "0.17.8"
hex = "0.4.3"
rand_chacha = "0.3.1"
lru = "0.12.3"
okaywal = "0.3.1"
atomic-write-file = "0.1.4"
tempfile = "3.10.1"
async-trait = "0.1.80"
blake3 = "=0.1.3"
thread_local = "1.1.8"
subtle = "2.6.1"
bon = "2.2.0"
shush-rs = "0.1.10"
criterion = { version = "0.5.1", features = ["html_reports"] }

[target.'cfg(target_os = "linux")'.dependencies]
fuse3 = { version = "0.7.2", features = ["tokio-runtime", "unprivileged"] }

[[bench]]
name = "crypto_read"
harness = false

[lints.rust]
#unsafe_code = "deny"

[lints.rustdoc]
#all = "warn"
#missing_crate_level_docs = "warn"

# See also clippy.toml
[lints.clippy]
#as_ptr_cast_mut = "warn"
#await_holding_lock = "warn"
#bool_to_int_with_if = "warn"
#char_lit_as_u8 = "warn"
#checked_conversions = "warn"
#clear_with_drain = "warn"
#cloned_instead_of_copied = "warn"
#dbg_macro = "warn"
#debug_assert_with_mut_call = "warn"
#derive_partial_eq_without_eq = "warn"
#disallowed_macros = "warn"                  # See clippy.toml
#disallowed_methods = "warn"                 # See clippy.toml
#disallowed_names = "warn"                   # See clippy.toml
#disallowed_script_idents = "warn"           # See clippy.toml
#disallowed_types = "warn"                   # See clippy.toml
#doc_link_with_quotes = "warn"
#doc_markdown = "warn"
#empty_enum = "warn"
#empty_enum_variants_with_brackets = "warn"
#enum_glob_use = "warn"
#equatable_if_let = "warn"
#exit = "warn"
#expl_impl_clone_on_copy = "warn"
#explicit_deref_methods = "warn"
#explicit_into_iter_loop = "warn"
#explicit_iter_loop = "warn"
#fallible_impl_from = "warn"
#filter_map_next = "warn"
#flat_map_option = "warn"
#float_cmp_const = "warn"
#fn_params_excessive_bools = "warn"
#fn_to_numeric_cast_any = "warn"
#from_iter_instead_of_collect = "warn"
#get_unwrap = "warn"
#if_let_mutex = "warn"
#implicit_clone = "warn"
#imprecise_flops = "warn"
#index_refutable_slice = "warn"
#inefficient_to_string = "warn"
#infinite_loop = "warn"
#into_iter_without_iter = "warn"
#invalid_upcast_comparisons = "warn"
#iter_filter_is_ok = "warn"
#iter_filter_is_some = "warn"
#iter_not_returning_iterator = "warn"
#iter_on_empty_collections = "warn"
#iter_on_single_items = "warn"
#iter_without_into_iter = "warn"
#large_digit_groups = "warn"
#large_include_file = "warn"
#large_stack_arrays = "warn"
#large_stack_frames = "warn"
#large_types_passed_by_value = "warn"
#let_unit_value = "warn"
#linkedlist = "warn"
#lossy_float_literal = "warn"
#macro_use_imports = "warn"
#manual_assert = "warn"
#manual_clamp = "warn"
#manual_instant_elapsed = "warn"
#manual_is_variant_and = "warn"
#manual_let_else = "warn"
#manual_ok_or = "warn"
#manual_string_new = "warn"
#map_err_ignore = "warn"
#map_flatten = "warn"
#match_on_vec_items = "warn"
#match_same_arms = "warn"
#match_wild_err_arm = "warn"
#match_wildcard_for_single_variants = "warn"
#mem_forget = "warn"
#mismatched_target_os = "warn"
#mismatching_type_param_order = "warn"
#missing_enforced_import_renames = "warn"
#missing_safety_doc = "warn"
#mixed_attributes_style = "warn"
#mut_mut = "warn"
#mutex_integer = "warn"
#needless_borrow = "warn"
#needless_continue = "warn"
#needless_for_each = "warn"
#needless_pass_by_ref_mut = "warn"
#needless_pass_by_value = "warn"
#negative_feature_names = "warn"
#nonstandard_macro_braces = "warn"
#option_as_ref_cloned = "warn"
#option_option = "warn"
#path_buf_push_overwrite = "warn"
#ptr_as_ptr = "warn"
#ptr_cast_constness = "warn"
#pub_underscore_fields = "warn"
#pub_without_shorthand = "warn"
#rc_mutex = "warn"
#readonly_write_lock = "warn"
#redundant_type_annotations = "warn"
#ref_as_ptr = "warn"
#ref_option_ref = "warn"
#rest_pat_in_fully_bound_structs = "warn"
#same_functions_in_if_condition = "warn"
#semicolon_if_nothing_returned = "warn"
#should_panic_without_expect = "warn"
#single_char_pattern = "warn"
#single_match_else = "warn"
#str_split_at_newline = "warn"
#str_to_string = "warn"
#string_add = "warn"
#string_add_assign = "warn"
#string_lit_as_bytes = "warn"
#string_lit_chars_any = "warn"
#string_to_string = "warn"
#suspicious_command_arg_space = "warn"
#suspicious_xor_used_as_pow = "warn"
#ktodo = "warn"
#too_many_lines = "warn"
#trailing_empty_array = "warn"
#trait_duplication_in_bounds = "warn"
#tuple_array_conversions = "warn"
#unchecked_duration_subtraction = "warn"
#undocumented_unsafe_blocks = "warn"
#unimplemented = "warn"
#uninhabited_references = "warn"
#uninlined_format_args = "warn"
#unnecessary_box_returns = "warn"
#unnecessary_safety_doc = "warn"
#unnecessary_struct_initialization = "warn"
#unnecessary_wraps = "warn"
#unnested_or_patterns = "warn"
#unused_peekable = "warn"
#unused_rounding = "warn"
#unused_self = "warn"
#unwrap_used = "warn"
#use_self = "warn"
#useless_transmute = "warn"
#verbose_file_reads = "warn"
#wildcard_dependencies = "warn"
#wildcard_imports = "warn"
#zero_sized_map_values = "warn"
## Disabled waiting on https://github.com/rust-lang/rust-clippy/issues/9602
##self_named_module_files = "warn"
#
#assigning_clones = "allow"      # Too much for too little
#manual_range_contains = "allow" # this one is just worse imho
#map_unwrap_or = "allow"         # so is this one
#ref_patterns = "allow"          # It's nice to avoid ref pattern, but there are some situations that are hard (impossible?) to express without.
#
#iter_over_hash_type = "allow"
#let_underscore_untyped = "allow"
#missing_assert_message = "allow"
#missing_errors_doc = "allow"
#significant_drop_tightening = "allow" # An update of parking_lot made this trigger in a lot of places.

[profile.release]
panic = "abort" # This leads to better optimizations and smaller binaries (and is the default in Wasm anyways).
# Treat warnings as errors in release builds
rustflags = ["-Dwarnings"]
lto = true

[package.metadata.aur]
depends = ["fuse3"]
files = [
    [
        "LICENSE-Apache-2.0",
        "/usr/share/licenses/$pkgname/LICENSE-Apache-2.0",
    ],
    [
        "LICENSE-MIT",
        "/usr/share/licenses/$pkgname/LICENSE-MIT",
    ],
    #    ["LICENSE-BSD-3-Clause", "/usr/share/licenses/$pkgname/LICENSE-BSD-3-Clause"]
]

[package.metadata.generate-rpm]
assets = [
    { source = "target/release/rencfs", dest = "/usr/bin/rencfs", mode = "755" },
    { source = "LICENSE-Apache-2.0", dest = "/usr/share/licenses/rencfs-bin/LICENSE-Apache-2.0", mode = "644" },
    { source = "LICENSE-MIT", dest = "/usr/share/licenses/rencfs-bin/LICENSE-MIT", mode = "644" },
    { source = "LICENSE-BSD-3-Clause", dest = "/usr/share/licenses/rencfs-bin/LICENSE-BSD-3-Clause", mode = "644" },
]
[package.metadata.generate-rpm.requires]
fuse3 = "*"
