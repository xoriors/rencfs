name: '_package'
on:
  workflow_call:
    inputs:
      upload_artifacts:
        description: 'If we should upload artifacts'
        type: boolean
        required: true
      version:
        description: 'The current value in version file (type: string)'
        type: string
        required: true
  
jobs:
  aur_build:
      name: build AUR
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: setup Rust
          uses: actions-rs/toolchain@v1
          with:
            toolchain: nightly
            components: rustfmt, clippy
            profile: minimal

        - name: setup Rust
          run: |
            cargo install cargo-aur
            cargo install cargo-generate-rpm          

        - name: run cargo aur and generate-rpm
          if: matrix.os == 'ubuntu-latest'
          run: |
            cargo aur
            cargo generate-rpm

        - name: check for publish
          run: cargo publish --dry-run --allow-dirty

        - name: upload PKGBUILD artifact
          if: inputs.upload_artifacts
          uses: actions/upload-artifact@v4
          with:
            name: PKGBUILD
            path: ./target/cargo-aur/PKGBUILD

        - name: upload ${{ github.event.repository.name }}-${{ inputs.version }}-x86_64.tar.gz artifact
          if: inputs.upload_artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ github.event.repository.name }}-${{ inputs.version }}-x86_64.tar.gz
            path: ./target/cargo-aur/${{ github.event.repository.name }}-${{ inputs.version }}-x86_64.tar.gz

  docker:
    name: docker
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    env:
      # Hostname of your registry
      REGISTRY: docker.io
      REGISTRY_USER: xorio42
      # Image repository, without hostname and tag
      IMAGE_NAME: ${{ github.event.repository.name }}
      IMAGE_TAG: latest
      SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
    steps:
      - uses: actions/checkout@v4

      - name: log in to Docker Hub
        if: inputs.upload_artifacts
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: build push = ${{ inputs.upload_artifacts }}
        uses: docker/build-push-action@v6
        with:
          push: ${{ inputs.upload_artifacts }}
          tags: ${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          sbom: true
          provenance: true
